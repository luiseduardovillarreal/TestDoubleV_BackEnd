// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movement.Infrastructure.Persistence.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Movement.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(MovementDbContext))]
    partial class MovementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Movement.Domain.Entities.Debt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Id autogenerativo para la llave principal de la tabla.");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("Amount")
                        .HasColumnOrder(4)
                        .HasComment("Valor del préstamo acordado entre deudor y creditor.");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de creación del registro.");

                    b.Property<double>("Difference")
                        .HasColumnType("double precision")
                        .HasColumnName("Difference")
                        .HasColumnOrder(5)
                        .HasComment("Valor excedente para lograr cubrir toda la deuda del préstamo.");

                    b.Property<Guid>("IdUserCreditor")
                        .HasColumnType("uuid")
                        .HasColumnName("IdUserCreditor")
                        .HasColumnOrder(3)
                        .HasComment("Llave foránea de referencia a la tabla TblUser.");

                    b.Property<Guid>("IdUserDebtor")
                        .HasColumnType("uuid")
                        .HasColumnName("IdUserDebtor")
                        .HasColumnOrder(2)
                        .HasComment("Llave foránea de referencia a la tabla TblUser.");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(8)
                        .HasComment("Esta propiedad traducida como ¿Está activo? Quiere decir que si el valor es true, es por que si está activo el registro, o sea que el registro no está eliminado, pero si el valor es false, quiere decir que el registro no está activo, o sea, está eliminado.");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdateAt")
                        .HasColumnOrder(7)
                        .HasComment("Fecha de la última modificación sobre el registro.");

                    b.HasKey("Id");

                    b.HasIndex("IdUserCreditor");

                    b.HasIndex("IdUserDebtor");

                    b.ToTable("TblMovementDebt");
                });

            modelBuilder.Entity("Movement.Domain.Entities.DebtMovement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Id autogenerativo para la llave principal de la tabla.");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision")
                        .HasColumnName("Amount")
                        .HasColumnOrder(3)
                        .HasComment("Valor del abono o pago a la deuda.");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(4)
                        .HasComment("Fecha de creación del registro.");

                    b.Property<Guid>("IdDebt")
                        .HasColumnType("uuid")
                        .HasColumnName("IdDebt")
                        .HasColumnOrder(2)
                        .HasComment("Llave foránea de referencia a la tabla TblMovementDebt.");

                    b.HasKey("Id");

                    b.HasIndex("IdDebt");

                    b.ToTable("TblMovementDebtMovement");
                });

            modelBuilder.Entity("Movement.Domain.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Id autogenerativo para la llave principal de la tabla.");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de creación del registro.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("Description")
                        .HasColumnOrder(3)
                        .HasComment("Descripción del módulo.");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Icon")
                        .HasColumnOrder(4)
                        .HasComment("Ícono para el módulo.");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(7)
                        .HasComment("Esta propiedad traducida como ¿Está activo? Quiere decir que si el valor es true, es por que si está activo el registro, o sea que el registro no está eliminado, pero si el valor es false, quiere decir que el registro no está activo, o sea, está eliminado.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2)
                        .HasComment("Breve nombre alusivo al módulo.");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdateAt")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de la última modificación sobre el registro.");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TblModule");

                    b.HasData(
                        new
                        {
                            Id = new Guid("42690d34-5695-4b04-aa50-7c85ee34f18d"),
                            CreateAt = new DateTime(2025, 9, 4, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Dashboard principal del aplicativo. Vista sin ningún componente a bordo.",
                            Icon = "menu-icon tf-icons bx bx-home-circle",
                            IsActive = true,
                            Name = "Dashboard"
                        },
                        new
                        {
                            Id = new Guid("0f96c167-ebcb-4083-a3e1-60332ca21827"),
                            CreateAt = new DateTime(2025, 9, 5, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Módulo encargado de las configuraciones del sistema; todo lo que puede ver sólo un súper usuario.",
                            Icon = "menu-icon tf-icons bx bx-cog",
                            IsActive = true,
                            Name = "Configuración"
                        },
                        new
                        {
                            Id = new Guid("62af661b-7686-42db-ac90-8d3e801aded0"),
                            CreateAt = new DateTime(2025, 9, 6, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Módulo encargado de la gestión de deudas.",
                            Icon = "menu-icon tf-icons bx bx-spreadsheet",
                            IsActive = true,
                            Name = "Admin. Deuda"
                        });
                });

            modelBuilder.Entity("Movement.Domain.Entities.Module_SubModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Id autogenerativo para la llave principal de la tabla.");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(4)
                        .HasComment("Fecha de creación del registro.");

                    b.Property<Guid>("IdModule")
                        .HasColumnType("uuid")
                        .HasColumnName("IdModule")
                        .HasColumnOrder(2)
                        .HasComment("Llave foránea de referencia a la tabla TblModule.");

                    b.Property<Guid>("IdSubModule")
                        .HasColumnType("uuid")
                        .HasColumnName("IdSubModule")
                        .HasColumnOrder(3)
                        .HasComment("Llave foránea de referencia a la tabla TblSubModule.");

                    b.HasKey("Id");

                    b.HasIndex("IdModule");

                    b.HasIndex("IdSubModule");

                    b.ToTable("TblModule_SubModule");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad53c111-7434-4d26-ad12-06276f30687f"),
                            CreateAt = new DateTime(2025, 9, 5, 12, 1, 0, 0, DateTimeKind.Utc),
                            IdModule = new Guid("0f96c167-ebcb-4083-a3e1-60332ca21827"),
                            IdSubModule = new Guid("2e4ab52e-95f0-4bc8-9273-1083305a5dd1")
                        },
                        new
                        {
                            Id = new Guid("5b2f13a2-8abe-48ef-9fb6-3b2dcafaab6d"),
                            CreateAt = new DateTime(2025, 9, 5, 12, 2, 0, 0, DateTimeKind.Utc),
                            IdModule = new Guid("0f96c167-ebcb-4083-a3e1-60332ca21827"),
                            IdSubModule = new Guid("8dd2ed3e-5d0e-435d-b1bd-b74bafbf8bf1")
                        },
                        new
                        {
                            Id = new Guid("b44ecaf8-5a2a-4b53-9d76-ade2a0994703"),
                            CreateAt = new DateTime(2025, 9, 5, 12, 3, 0, 0, DateTimeKind.Utc),
                            IdModule = new Guid("0f96c167-ebcb-4083-a3e1-60332ca21827"),
                            IdSubModule = new Guid("d66b1448-cbb8-483d-9dc3-9016b3b4c92f")
                        },
                        new
                        {
                            Id = new Guid("3fdef01b-7f33-4200-a983-beaa96548ee6"),
                            CreateAt = new DateTime(2025, 9, 6, 12, 0, 0, 0, DateTimeKind.Utc),
                            IdModule = new Guid("62af661b-7686-42db-ac90-8d3e801aded0"),
                            IdSubModule = new Guid("1d53feef-eb1a-4b4e-bd7b-163341b8e2fd")
                        });
                });

            modelBuilder.Entity("Movement.Domain.Entities.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Id autogenerativo para la llave principal de la tabla.");

                    b.Property<byte>("Code")
                        .HasPrecision(3)
                        .HasColumnType("smallint")
                        .HasColumnName("Code")
                        .HasColumnOrder(2)
                        .HasComment("Código numérico de identificación única para un registro.");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de creación del registro.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("Description")
                        .HasColumnOrder(4)
                        .HasComment("Descripción del perfil.");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(7)
                        .HasComment("Esta propiedad traducida como ¿Está activo? Quiere decir que si el valor es true, es por que si está activo el registro, o sea que el registro no está eliminado, pero si el valor es false, quiere decir que el registro no está activo, o sea, está eliminado.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name")
                        .HasColumnOrder(3)
                        .HasComment("Breve nombre alusivo al perfil.");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdateAt")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de la última modificación sobre el registro.");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TblProfile");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa30317b-e63b-4ac0-bfde-1d97cdb38001"),
                            Code = (byte)1,
                            CreateAt = new DateTime(2025, 9, 4, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Perfil encargado del acceso total y toda la configuración del sistema.",
                            IsActive = true,
                            Name = "Súper Administrador"
                        },
                        new
                        {
                            Id = new Guid("cd2b4165-a729-4f24-b218-c60f965cab21"),
                            Code = (byte)2,
                            CreateAt = new DateTime(2025, 9, 5, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Perfil encargado de manejar sus movimientos en cuanto a deudas.",
                            IsActive = true,
                            Name = "Usuario del Sistema"
                        });
                });

            modelBuilder.Entity("Movement.Domain.Entities.Profile_Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Id autogenerativo para la llave principal de la tabla.");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(4)
                        .HasComment("Fecha de creación del registro.");

                    b.Property<Guid>("IdModule")
                        .HasColumnType("uuid")
                        .HasColumnName("IdModule")
                        .HasColumnOrder(3)
                        .HasComment("Llave foránea de referencia a la tabla TblModule.");

                    b.Property<Guid>("IdProfile")
                        .HasColumnType("uuid")
                        .HasColumnName("IdProfile")
                        .HasColumnOrder(2)
                        .HasComment("Llave foránea de referencia a la tabla TblProfile.");

                    b.HasKey("Id");

                    b.HasIndex("IdModule");

                    b.HasIndex("IdProfile");

                    b.ToTable("TblProfile_Module");

                    b.HasData(
                        new
                        {
                            Id = new Guid("28c9b1fc-2906-4d3f-9a6a-cbcfc64c727e"),
                            CreateAt = new DateTime(2025, 9, 4, 12, 0, 0, 0, DateTimeKind.Utc),
                            IdModule = new Guid("42690d34-5695-4b04-aa50-7c85ee34f18d"),
                            IdProfile = new Guid("aa30317b-e63b-4ac0-bfde-1d97cdb38001")
                        },
                        new
                        {
                            Id = new Guid("db9a7883-2dee-4f56-a75e-4b59345b64cd"),
                            CreateAt = new DateTime(2025, 9, 5, 12, 0, 0, 0, DateTimeKind.Utc),
                            IdModule = new Guid("0f96c167-ebcb-4083-a3e1-60332ca21827"),
                            IdProfile = new Guid("aa30317b-e63b-4ac0-bfde-1d97cdb38001")
                        },
                        new
                        {
                            Id = new Guid("5886b671-948b-46b8-9c8b-8e115021f7e1"),
                            CreateAt = new DateTime(2025, 9, 4, 12, 0, 0, 0, DateTimeKind.Utc),
                            IdModule = new Guid("42690d34-5695-4b04-aa50-7c85ee34f18d"),
                            IdProfile = new Guid("cd2b4165-a729-4f24-b218-c60f965cab21")
                        },
                        new
                        {
                            Id = new Guid("5360c6c3-7bf3-436a-b107-87e767638335"),
                            CreateAt = new DateTime(2025, 9, 5, 12, 0, 0, 0, DateTimeKind.Utc),
                            IdModule = new Guid("62af661b-7686-42db-ac90-8d3e801aded0"),
                            IdProfile = new Guid("cd2b4165-a729-4f24-b218-c60f965cab21")
                        });
                });

            modelBuilder.Entity("Movement.Domain.Entities.Profile_SubModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Id autogenerativo para la llave principal de la tabla.");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(4)
                        .HasComment("Fecha de creación del registro.");

                    b.Property<Guid>("IdProfile")
                        .HasColumnType("uuid")
                        .HasColumnName("IdProfile")
                        .HasColumnOrder(2)
                        .HasComment("Llave foránea de referencia a la tabla TblProfile.");

                    b.Property<Guid>("IdSubModule")
                        .HasColumnType("uuid")
                        .HasColumnName("IdSubModule")
                        .HasColumnOrder(3)
                        .HasComment("Llave foránea de referencia a la tabla TblSubModule.");

                    b.HasKey("Id");

                    b.HasIndex("IdProfile");

                    b.HasIndex("IdSubModule");

                    b.ToTable("TblProfile_SubModule");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7455cbac-dbfa-4b70-a093-03529da55eac"),
                            CreateAt = new DateTime(2025, 6, 6, 12, 1, 0, 0, DateTimeKind.Utc),
                            IdProfile = new Guid("aa30317b-e63b-4ac0-bfde-1d97cdb38001"),
                            IdSubModule = new Guid("2e4ab52e-95f0-4bc8-9273-1083305a5dd1")
                        },
                        new
                        {
                            Id = new Guid("7e2be985-11ce-4bba-8ed2-1b233fc8feda"),
                            CreateAt = new DateTime(2025, 6, 5, 12, 0, 0, 0, DateTimeKind.Utc),
                            IdProfile = new Guid("aa30317b-e63b-4ac0-bfde-1d97cdb38001"),
                            IdSubModule = new Guid("8dd2ed3e-5d0e-435d-b1bd-b74bafbf8bf1")
                        },
                        new
                        {
                            Id = new Guid("e39e75d3-ab07-44c0-b123-2f7c549d9f2a"),
                            CreateAt = new DateTime(2025, 6, 5, 12, 2, 0, 0, DateTimeKind.Utc),
                            IdProfile = new Guid("aa30317b-e63b-4ac0-bfde-1d97cdb38001"),
                            IdSubModule = new Guid("d66b1448-cbb8-483d-9dc3-9016b3b4c92f")
                        },
                        new
                        {
                            Id = new Guid("0b25fea0-a5af-405f-a9ec-73e3609d8630"),
                            CreateAt = new DateTime(2025, 6, 6, 12, 0, 0, 0, DateTimeKind.Utc),
                            IdProfile = new Guid("cd2b4165-a729-4f24-b218-c60f965cab21"),
                            IdSubModule = new Guid("1d53feef-eb1a-4b4e-bd7b-163341b8e2fd")
                        });
                });

            modelBuilder.Entity("Movement.Domain.Entities.Rol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Id autogenerativo para la llave principal de la tabla.");

                    b.Property<byte>("Code")
                        .HasPrecision(3)
                        .HasColumnType("smallint")
                        .HasColumnName("Code")
                        .HasColumnOrder(2)
                        .HasComment("Código numérico de identificación única para un registro.");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de creación del registro.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("Description")
                        .HasColumnOrder(4)
                        .HasComment("Descripción del rol de usuario.");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(7)
                        .HasComment("Esta propiedad traducida como ¿Está activo? Quiere decir que si el valor es true, es por que si está activo el registro, o sea que el registro no está eliminado, pero si el valor es false, quiere decir que el registro no está activo, o sea, está eliminado.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("Name")
                        .HasColumnOrder(3)
                        .HasComment("Breve nombre alusivo al rol de usuario.");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdateAt")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de la última modificación sobre el registro.");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TblRol");
                });

            modelBuilder.Entity("Movement.Domain.Entities.SubModule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Id autogenerativo para la llave principal de la tabla.");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de creación del registro.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("Description")
                        .HasColumnOrder(3)
                        .HasComment("Descripción del sub módulo.");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(7)
                        .HasComment("Esta propiedad traducida como ¿Está activo? Quiere decir que si el valor es true, es por que si está activo el registro, o sea que el registro no está eliminado, pero si el valor es false, quiere decir que el registro no está activo, o sea, está eliminado.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Name")
                        .HasColumnOrder(2)
                        .HasComment("Breve nombre alusivo al sub módulo.");

                    b.Property<string>("RouterLink")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("RouterLink")
                        .HasColumnOrder(4)
                        .HasComment("Ruta de apertura del submódulo al hacer clic.");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdateAt")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de la última modificación sobre el registro.");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("TblSubModule");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2e4ab52e-95f0-4bc8-9273-1083305a5dd1"),
                            CreateAt = new DateTime(2025, 9, 6, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Permite listar los usuarios del sistema.",
                            IsActive = true,
                            Name = "Listar usuarios",
                            RouterLink = "list-users"
                        },
                        new
                        {
                            Id = new Guid("8dd2ed3e-5d0e-435d-b1bd-b74bafbf8bf1"),
                            CreateAt = new DateTime(2025, 9, 7, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Permite la visualización de las deudas de todos los usuarios del sistema.",
                            IsActive = true,
                            Name = "Listar deudas",
                            RouterLink = "list-debts"
                        },
                        new
                        {
                            Id = new Guid("d66b1448-cbb8-483d-9dc3-9016b3b4c92f"),
                            CreateAt = new DateTime(2025, 9, 8, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Permite la visualización de los pagos o abonos a las deudas de todos los usuarios.",
                            IsActive = true,
                            Name = "Listar pagos",
                            RouterLink = "list-pays"
                        },
                        new
                        {
                            Id = new Guid("1d53feef-eb1a-4b4e-bd7b-163341b8e2fd"),
                            CreateAt = new DateTime(2025, 9, 6, 12, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Permite la gestión de las deuda.",
                            IsActive = true,
                            Name = "Gestionar deudas",
                            RouterLink = "manage-debts"
                        });
                });

            modelBuilder.Entity("Movement.Domain.Entities.TokenUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Id autogenerativo para la llave principal de la tabla.");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(4)
                        .HasComment("Fecha de creación del registro.");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ExpireAt")
                        .HasColumnOrder(5)
                        .HasComment("Fecha de expiración del Token para el usuario, una vez expira, ya no puede ser utilizado para ninguna acción.");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uuid")
                        .HasColumnName("IdUser")
                        .HasColumnOrder(2)
                        .HasComment("Llave foránea de referencia a la tabla TblUser.");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("Token")
                        .HasColumnOrder(3)
                        .HasComment("Token que manejará la seguridad de muestra y acceso a las interfaces para los usuario, que necesiten seguridad.");

                    b.HasKey("Id");

                    b.HasIndex("IdUser");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("TblTokenUser");
                });

            modelBuilder.Entity("Movement.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Id autogenerativo para la llave principal de la tabla.");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(6)
                        .HasComment("Fecha de creación del registro.");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Email")
                        .HasColumnOrder(4)
                        .HasComment("Correo electrónico del usuario.");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("IsActive")
                        .HasColumnOrder(8)
                        .HasComment("Esta propiedad traducida como ¿Está activo? Quiere decir que si el valor es true, es por que si está activo el registro, o sea que el registro no está eliminado, pero si el valor es false, quiere decir que el registro no está activo, o sea, está eliminado.");

                    b.Property<string>("LastNames")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("LastNames")
                        .HasColumnOrder(3)
                        .HasComment("Apellidos completos del usuario.");

                    b.Property<string>("Names")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Names")
                        .HasColumnOrder(2)
                        .HasComment("Nombres completos del usuario.");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("´Password")
                        .HasColumnOrder(5)
                        .HasComment("Contraseña del usuario.");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdateAt")
                        .HasColumnOrder(7)
                        .HasComment("Fecha de creación del registro.");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("TblUser");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4b6045d7-dc71-42f4-8b32-43cc00cc75fb"),
                            CreateAt = new DateTime(2025, 6, 4, 12, 0, 0, 0, DateTimeKind.Utc),
                            Email = "super.admin@superadmin.com.co",
                            IsActive = true,
                            LastNames = "Súper Administrador",
                            Names = "Usuario",
                            Password = "wGlDz9tGVWdASYi4y5tmRo9d8whwAkeirODO8ksI3rbiT8ZMoRfTo4WWhhqsKUy5cPDOBu6WL10RgVA+Rwb8ok5J5rbXJN5UF7l38C64s0JHKnXOnshOej54X2wRrSrAY2s1QqPD7dXjXXhemWg="
                        });
                });

            modelBuilder.Entity("Movement.Domain.Entities.User_Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Id autogenerativo para la llave principal de la tabla.");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(4)
                        .HasComment("Fecha de creación del registro.");

                    b.Property<Guid>("IdProfile")
                        .HasColumnType("uuid")
                        .HasColumnName("IdProfile")
                        .HasColumnOrder(3)
                        .HasComment("Llave foránea de referencia a la tabla TblProfile.");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uuid")
                        .HasColumnName("IdUser")
                        .HasColumnOrder(2)
                        .HasComment("Llave foránea de referencia a la tabla TblUser.");

                    b.HasKey("Id");

                    b.HasIndex("IdProfile");

                    b.HasIndex("IdUser");

                    b.ToTable("TblUser_Profile");

                    b.HasData(
                        new
                        {
                            Id = new Guid("39fa6836-cca2-4507-9629-b45a9f17e9d5"),
                            CreateAt = new DateTime(2025, 6, 4, 12, 0, 0, 0, DateTimeKind.Utc),
                            IdProfile = new Guid("aa30317b-e63b-4ac0-bfde-1d97cdb38001"),
                            IdUser = new Guid("4b6045d7-dc71-42f4-8b32-43cc00cc75fb")
                        });
                });

            modelBuilder.Entity("Movement.Domain.Entities.User_Rol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("Id")
                        .HasColumnOrder(1)
                        .HasComment("Id autogenerativo para la llave principal de la tabla.");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreateAt")
                        .HasColumnOrder(4)
                        .HasComment("Fecha de creación del registro.");

                    b.Property<Guid>("IdRol")
                        .HasColumnType("uuid")
                        .HasColumnName("IdRol")
                        .HasColumnOrder(3)
                        .HasComment("Llave foránea de referencia a la tabla TblRol.");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uuid")
                        .HasColumnName("IdUser")
                        .HasColumnOrder(2)
                        .HasComment("Llave foránea de referencia a la tabla TblUser.");

                    b.HasKey("Id");

                    b.HasIndex("IdRol");

                    b.HasIndex("IdUser");

                    b.ToTable("TblUser_Rol");
                });

            modelBuilder.Entity("Movement.Domain.Entities.Debt", b =>
                {
                    b.HasOne("Movement.Domain.Entities.User", "UserCreditor")
                        .WithMany("DebtsCreditor")
                        .HasForeignKey("IdUserCreditor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Movement.Domain.Entities.User", "UserDebtor")
                        .WithMany("DebtsDebtor")
                        .HasForeignKey("IdUserDebtor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserCreditor");

                    b.Navigation("UserDebtor");
                });

            modelBuilder.Entity("Movement.Domain.Entities.DebtMovement", b =>
                {
                    b.HasOne("Movement.Domain.Entities.Debt", "Debt")
                        .WithMany("DebtsMovements")
                        .HasForeignKey("IdDebt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Debt");
                });

            modelBuilder.Entity("Movement.Domain.Entities.Module_SubModule", b =>
                {
                    b.HasOne("Movement.Domain.Entities.Module", "Module")
                        .WithMany("Modules_SubModules")
                        .HasForeignKey("IdModule")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Movement.Domain.Entities.SubModule", "SubModule")
                        .WithMany("Modules_SubModules")
                        .HasForeignKey("IdSubModule")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("SubModule");
                });

            modelBuilder.Entity("Movement.Domain.Entities.Profile_Module", b =>
                {
                    b.HasOne("Movement.Domain.Entities.Module", "Module")
                        .WithMany("Profiles_Modules")
                        .HasForeignKey("IdModule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movement.Domain.Entities.Profile", "Profile")
                        .WithMany("Profiles_Modules")
                        .HasForeignKey("IdProfile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Movement.Domain.Entities.Profile_SubModule", b =>
                {
                    b.HasOne("Movement.Domain.Entities.Profile", "Profile")
                        .WithMany("Profiles_SubModules")
                        .HasForeignKey("IdProfile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movement.Domain.Entities.SubModule", "SubModule")
                        .WithMany("Profiles_SubModules")
                        .HasForeignKey("IdSubModule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("SubModule");
                });

            modelBuilder.Entity("Movement.Domain.Entities.TokenUser", b =>
                {
                    b.HasOne("Movement.Domain.Entities.User", "User")
                        .WithMany("TokensUsers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movement.Domain.Entities.User_Profile", b =>
                {
                    b.HasOne("Movement.Domain.Entities.Profile", "Profile")
                        .WithMany("Users_Profiles")
                        .HasForeignKey("IdProfile")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movement.Domain.Entities.User", "User")
                        .WithMany("Users_Profiles")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movement.Domain.Entities.User_Rol", b =>
                {
                    b.HasOne("Movement.Domain.Entities.Rol", "Rol")
                        .WithMany("Users_Rols")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movement.Domain.Entities.User", "User")
                        .WithMany("Users_Rols")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movement.Domain.Entities.Debt", b =>
                {
                    b.Navigation("DebtsMovements");
                });

            modelBuilder.Entity("Movement.Domain.Entities.Module", b =>
                {
                    b.Navigation("Modules_SubModules");

                    b.Navigation("Profiles_Modules");
                });

            modelBuilder.Entity("Movement.Domain.Entities.Profile", b =>
                {
                    b.Navigation("Profiles_Modules");

                    b.Navigation("Profiles_SubModules");

                    b.Navigation("Users_Profiles");
                });

            modelBuilder.Entity("Movement.Domain.Entities.Rol", b =>
                {
                    b.Navigation("Users_Rols");
                });

            modelBuilder.Entity("Movement.Domain.Entities.SubModule", b =>
                {
                    b.Navigation("Modules_SubModules");

                    b.Navigation("Profiles_SubModules");
                });

            modelBuilder.Entity("Movement.Domain.Entities.User", b =>
                {
                    b.Navigation("DebtsCreditor");

                    b.Navigation("DebtsDebtor");

                    b.Navigation("TokensUsers");

                    b.Navigation("Users_Profiles");

                    b.Navigation("Users_Rols");
                });
#pragma warning restore 612, 618
        }
    }
}
